---
version: "2.4"
services:
  # ----------------------------
  # Definição do Banco de dados
  # ----------------------------
  db:
    image: postgres:11
    ports:
      - '5432:5432'
    volumes:
      - 'postgres_data:/data'
    environment:
      POSTGRES_PASSWORD: 123
    networks:
      - queima-back-tier
    healthcheck:
      test: pg_isready -U postgres -h 127.0.0.1
      interval: 5s
  # ---------------------
  # Definição do serviço 
  # ---------------------  
  api:
    # Nome da Imagem na sua maquina
    image: test_api
    # Builda o container
    build: 
      context: '.'
      dockerfile: ./Dockerfile
      network: host
    # Mapeando o Sua pasta de desenvolvimento para o Container
    volumes:
      - ../:/app
    # Definindo onde o container deve inicializar
    working_dir: /app
    # Definindo o usuário e grupo como os logados na maquina Host (permissão)
    user: "${UID}:${GID}"
    # Espere o banco de dados começar
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: local
      # DB: qd_template_backend_db
      # DB_HOST: db
      # DB_USER: postgres
      # DB_PASSWORD: 123
      TYPEORM_MIGRATIONS: dist/migrations/*.js
      TYPEORM_MIGRATIONS_DIR: dist/migrations
      TYPEORM_SYNCHRONIZE: "false"
      TYPEORM_LOGGING: "true"
    # Bind de porta Host:Container para teste e debug
    ports: 
      - 3000:3000 # teste
      - 9229:9229   # debug
    # Define rede do banco de dados
    networks:
      - queima-back-tier
    # Comando fake para manter o container rodando
    command: watch ls

volumes:
    # Evita perda de dados do container de DB 
  postgres_data: {}

networks:
  # Separa as redes de Banco de dados das demais
  queima-back-tier: {}
        