name: Deploy to AWS [Development]

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

env:
  # Service configuration
  ECR_REPO_NAME: queima/microservice/x
  SERVICE_NAME: microservice-x
  PORT: 3000
  # Environment Configuration
  STAGE: dev
  ENVIRONMENT: dev
  AWS_DEFAULT_REGION: us-east-1
  TF_WORKSPACE: dev
  VPC_NAME: queima-dev-vpc
  # Credentials Configuration
  PAT: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}

jobs:
  test:
    name: Test All
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Use Node.js 12.x
        uses: actions/setup-node@v2
        with:
          node-version: 12.x
  
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
  
      - uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Configure NPM
        run: |
          cat <<EOF > .npmrc
          @queimadiaria:registry=https://npm.pkg.github.com/
          //npm.pkg.github.com/:_authToken=$PAT
          EOF

      - name: Run Test Migration container
        if: "!contains(github.event.head_commit.message, 'skip test')"
        env:
          ENVIRONMENT: ""
        run: | 
          sh ./config/environment.config.sh
          docker-compose up -d --build
          rm .env

      - name: Check api_user
        run: sleep 15 && curl -sf http://localhost:${PORT}/health || (docker-compose logs api && exit 1)

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    # needs:
    #   - test
    environment: development
      
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Cache Terraform
      uses: actions/cache@v2
      with:
        path: ./terraform/.terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/service.tf') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Setup GitHub
      env:
         SSH_KEY: ${{ secrets.SSH_KEY }}
      run: |
        mkdir -p ~/.ssh/
        cat>~/.ssh/id_ed25519<<EOF
        ${SSH_KEY}
        EOF
        chmod 400 ~/.ssh/id_ed25519

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Setup Vault
      run: |
        wget https://releases.hashicorp.com/vault/1.7.3/vault_1.7.3_linux_amd64.zip -O vault.zip \
        && sudo unzip vault.zip -d /usr/local/bin && rm vault.zip
        wget https://queima-artifacts.s3.amazonaws.com/awsqueima.zip -O /tmp/awsqueima.zip \
        && sudo unzip /tmp/awsqueima.zip -d /usr/local/bin \
        && sudo chmod +x /usr/local/bin/awsqueima
        awsqueima -l

    - name: Setup Teraform environment
      run: |
        $(awsqueima -a main)
        bash config/terraform.config.sh
        cat terraform/variables.auto.tfvars

    - name: Terraform Init
      working-directory: ./terraform
      run:  terraform init -upgrade
      
    - name: Terraform Validate
      working-directory: ./terraform
      run:  terraform validate

    - name: Terraform Format
      working-directory: ./terraform
      run:  terraform fmt -recursive

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      working-directory: ./terraform
      run: terraform plan -no-color
      continue-on-error: true
      
    - name: Update Pull Request
      uses: actions/github-script@v4
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
      working-directory: ./terraform
      run: terraform apply -auto-approve

  deploy-dev:
    if: github.event_name == 'push'
    name: Deploy MS
    environment: development
    needs:
      - test
      - terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Vault
        run: |
          wget https://releases.hashicorp.com/vault/1.7.3/vault_1.7.3_linux_amd64.zip -O vault.zip \
          && sudo unzip vault.zip -d /usr/local/bin && rm vault.zip
          wget https://queima-artifacts.s3.amazonaws.com/awsqueima.zip -O /tmp/awsqueima.zip \
          && sudo unzip /tmp/awsqueima.zip -d /usr/local/bin \
          && sudo chmod +x /usr/local/bin/awsqueima
          awsqueima -l

      - name: Configure AWS Credentials
        run: |
          $(awsqueima -a dev)
          cat>>$GITHUB_ENV<<EOF
          AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
          AWS_REGION=${AWS_DEFAULT_REGION}
          EOF
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
              
      - name: Get Environment names
        env:
          ENVIRONMENT: dev
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
        run: |
          sh config/environment.config.sh
          cat .env
      
      - name: Configure NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN  }}
        run: |
          cat <<EOF > .npmrc
          @queimadiaria:registry=https://npm.pkg.github.com/
          //npm.pkg.github.com/:_authToken=$NODE_AUTH_TOKEN
          EOF

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --build-arg NODE_ENV=development \
            --build-arg NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }} \
            --build-arg NEW_RELIC_APP_NAME=${SERVICE_NAME}-${STAGE} \
            -t $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG"

      - name: Get Task Definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "task-${SERVICE_NAME}" \
            --region "us-east-1" \
            --query taskDefinition | \
          jq --arg img "${SERVICE_NAME}" \
            '.containerDefinitions[0].name = $img' > taskDefinition.json
          cat taskDefinition.json
          CLUSTER=$(aws ecs list-clusters | \
            jq ".clusterArns[]" -r | \
            cut -d "/" -f2 | \
            grep ${STAGE})
          echo "CLUSTER=$CLUSTER" >> $GITHUB_ENV

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: taskDefinition.json
          container-name: ${{ env.SERVICE_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.7
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER }}
          wait-for-service-stability: false